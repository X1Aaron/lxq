#!/bin/bash

source /etc/lxq/lxq.cfg  > /dev/null 2>&1

exec() {
lxc exec $1 -- bash
}

update() {
  cd /opt/lxq/
  git fetch --all
  git reset --hard origin/master
  chmod a+x lxq
  chmod a+x fix-update.sh
}

install() {

#if [ -z $WILDCARD_DOMAIN ]
#then
##########
#if [ -z $1 ]
#then
#echo "ERROR: Missing APPNAME"
#exit
#fi
##########
#if [ -z $2 ]
#then
#echo "ERROR: Missing DOMAIN NAME"
#exit
#fi
##########
#if [ -d /var/snap/lxd/common/lxd/containers/$1 ];
#then 
#echo "ERROR: $1 Already Exists"
#exit
#fi
##########
#if [ "$1" = nginx ]
#then
#create_container $1
#echo "Installing NGINX..."
#lxc exec $1 -- apt-get install nginx  -y
#echo "Installing certbot..."
#sleep 5
#lxc exec $1 -- apt-get update -y
#lxc exec $1 -- apt-get install software-properties-common -y
#lxc exec $1 -- add-apt-repository ppa:certbot/certbot -y
#lxc exec $1 -- apt-get update -y
#lxc exec $1 -- apt-get install python-certbot-nginx -y
#refresh_firewall
#fi
##########
#if [ "$1" = nextcloud ]
#then
create_container $1
echo "Installing $1..."
source /opt/lxq/scripts/$1.sh $1
gen_conf $1 $2
lets_encrypt $1 $2
#fi
##########
if [ "$1" = rocketchat ]
then
create_container $1
echo "Installing Rocket.Chat..."
lxc exec $1 -- apt-get install snapd -y
lxc exec $1 -- export PATH=$PATH:/snap/bin
sleep 1
lxc exec $1 -- snap install rocketchat-server
gen_conf $1 $2
lets_encrypt $1 $2
fi
##########
if [ "$1" = openvpn ]
then
create_container $1
echo "Installing OpenVPN..."
curl -O https://raw.githubusercontent.com/Angristan/openvpn-install/master/openvpn-install.sh
lxc file push openvpn-install.sh $1/tmp/
rm openvpn-install.sh
lxc exec $1 -- chmod +x /tmp/openvpn-install.sh
lxc exec $1 -- /tmp/openvpn-install.sh
refresh_firewall
fi
########
if [ "$1" = bookstack ]
then
create_container $1
echo "Installing BookStack..."
lxc file push /opt/lxq/scripts/install-bookstack.sh $1/root/
lxc exec $1 -- chmod a+x install-bookstack.sh
lxc exec $1 -- ./install-bookstack.sh $2
lxc exec $1 -- sed -i "s/#\sAPP_URL\=http:\/\/bookstack.dev/APP_URL=https:\/\/$2/g" /var/www/bookstack/.env
gen_conf $1 $2
lets_encrypt $1 $2
fi
############
if [ -z "$WILDCARD_DOMAIN" ]
then
echo $1 setup complete! [$1.$WILDCARD_DOMAIN]
else
echo $1 setup complete! [$2]
fi
#fi
}

gen_conf() {
source /opt/lxq/conf/nextcloud.cfg
DOMAIN_NAME=$2
if [ -z "$WILDCARD_DOMAIN" ]
  then
  CONTAINER_LOCAL_IP=$(lxc list $1 -c 4 --format csv | awk '{print $1}')
  echo "IP Address:" $CONTAINER_LOCAL_IP
  echo "Pushing temporary .conf file to container..."
  cp /opt/lxq/nginx.temp $1.conf
  #echo "Enter Domain Name:"
  #read DOMAIN_NAME
  sed -i "s/<<DOMAIN_NAME>>/$DOMAIN_NAME/g" $1.conf
  sed -i "s/<<CONTAINER_LOCAL_IP>>/$CONTAINER_LOCAL_IP/g" $1.conf
  sed -i "s/<<CONTAINER_PORT>>/$CONTAINER_PORT/g" $1.conf
  lxc file push $1.conf nginx/etc/nginx/conf.d/
  rm $1.conf
  lxc exec nginx -- systemctl reload nginx
  else
  echo "Pushing wildcard .conf file to container..."
  CONTAINER_LOCAL_IP=$(lxc list $1 -c 4 --format csv | awk '{print $1}')
  cp /opt/lxq/wildcard.temp $1.conf
  SUB_DOMAIN="$1.$WILDCARD_DOMAIN"
  sed -i "s/<<SUB_DOMAIN>>/$SUB_DOMAIN/g" $1.conf
  sed -i "s/<<DOMAIN_NAME>>/$WILDCARD_DOMAIN/g" $1.conf
  sed -i "s/<<IP>>/$CONTAINER_LOCAL_IP/g" $1.conf
  sed -i "s/<<PORT>>/$CONTAINER_PORT/g" $1.conf
  lxc file push $1.conf nginx/etc/nginx/conf.d/
  rm $1.conf
  lxc exec nginx -- systemctl reload nginx
  fi
}

lets_encrypt() {
echo "Generating Certificates..."
DOMAIN_NAME=$2
  if [ -z "$WILDCARD_DOMAIN" ]
  then
  if [ -z "$LE_EMAIL" ]
  then
  echo
  echo "What is your email address? [Used for Let’s Encrypt]"
  read LE_EMAIL
  echo "LE_EMAIL=$LE_EMAIL" >> /etc/lxq/lxq.cfg
  fi
  lxc exec nginx -- certbot --nginx -n --email $LE_EMAIL --agree-tos --domains $DOMAIN_NAME --redirect
  echo
  echo Done!
  echo
  else
  echo "Wildcard Certificate Installed!"
  fi
  echo
  echo Done!
  echo
}


reload() {
lxc exec nginx -- systemctl reload nginx
if [ nginx = "$1" ]
then
lxc exec nginx -- systemctl reload nginx
fi
}

conf() {
if [ -z $1 ]
then
cat /etc/lxq/lxq.cfg
fi

if [ edit = "$1" ]
then
nano /etc/lxq/lxq.cfg
fi

if [ purge = "$1" ]
then
rm /etc/lxq/lxq.cfg
fi

}

backup() {

if [ -z $1 ]
then
for i in $(ls /var/snap/lxd/common/lxd/containers/); 
do
echo "Backing up $i..."
lxc export $i $i.tar.xz ; 
done
else
echo "Backing up $1..."
lxc export $1 $1.tar.xz
fi

#rclone copy 20181106-160946-nginx.tar.xz wasabi:aaronstuder

#if [ -f /usr/bin/rclone ];
#    then 
#    echo
#    echo "Running Offsite Backup"
#    echo
#    else
#    echo "rclone not installed"
#   fi
}

wildcard() {

if [ -n "$WILDCARD_DOMAIN" ]
then
echo "Wildcard Already Setup"
exit
else

if [ -z $1 ]
then
echo "Missing DNS Provider"
exit
fi

if [ cloudflare = "$1" ]
then
dns_setup_cloudflare
fi
fi
}

dns_setup_cloudflare() {

echo
echo "What is your Cloudflare Email Address?"
read cf_email
echo
echo "What is your Cloudflare API Key?"
read cf_key
echo "Installing Cloudflare DNS Plugin"
lxc exec nginx -- apt-get install python3-certbot-dns-cloudflare -y
echo
echo "Creating cloudflare.ini..." 
cat > cloudflare.ini <<EOF
# Cloudflare API credentials used by Certbot
dns_cloudflare_email = $cf_email
dns_cloudflare_api_key = $cf_key
EOF
echo "Pushing cloudflare.ini to nginx container"
lxc file push cloudflare.ini nginx/root/
rm cloudflare.ini
if [ -f /var/snap/lxd/common/mntns/var/snap/lxd/common/lxd/storage-pools/default/containers/nginx/rootfs/root/cloudflare.ini ];
then
echo "$1 setup complete!"
lets_encrypt_wildcard
else
echo "FAILED: cloudflare.ini not created"
exit
fi
}


lets_encrypt_wildcard() {
if [ -z "$LE_EMAIL" ]
then
echo
echo "What is your email address? [Used for Let’s Encrypt]"
read LE_EMAIL
echo "LE_EMAIL=$LE_EMAIL" >> /etc/lxq/lxq.cfg
fi

if [ -z "$WILDCARD_DOMAIN" ]
then
echo
echo "What is your domain name?"
read WILDCARD_DOMAIN
echo "WILDCARD_DOMAIN=$WILDCARD_DOMAIN" >> /etc/lxq/lxq.cfg
fi

A="*."
WC_DOMAIN="$A$WILDCARD_DOMAIN"
echo "Installing Wildcard Certificate for $WILDCARD_DOMAIN ($WC_DOMAIN)..."
lxc exec nginx -- certbot certonly --dns-cloudflare --dns-cloudflare-credentials /root/cloudflare.ini -d $WILDCARD_DOMAIN  -d $WC_DOMAIN --agree-tos --noninteractive --manual-public-ip-logging-ok --email $LE_EMAIL
}

refresh_firewall() {
echo "Clearing All PREROUTING Rules..."
for i in $( iptables -t nat --line-numbers -L | grep ^[0-9] | awk '{ print $1 }' | tac ); do iptables -t nat -D PREROUTING $i; done
if [ -z "$PUBLIC_IP" ]
then
PUBLIC_IP=`curl -s ifconfig.me`
echo "Public IP: $PUBLIC_IP"
echo "Saving to /etc/lxq/lxq.cfg"
echo "PUBLIC_IP=$PUBLIC_IP" >> /etc/lxq/lxq.cfg
fi

if [ -d /var/snap/lxd/common/lxd/containers/nginx ]; then echo "Found nginx!"
NGINX_IP=$(lxc list nginx -c 4 --format csv | awk '{print $1}')
iptables -t nat -I PREROUTING -i eth0 -p TCP -d $PUBLIC_IP --dport 80 -j DNAT --to-destination $NGINX_IP:80
iptables -t nat -I PREROUTING -i eth0 -p TCP -d $PUBLIC_IP --dport 443 -j DNAT --to-destination $NGINX_IP:443
echo "Updated Firewall Rules for nginx"

fi
if [ -d /var/snap/lxd/common/lxd/containers/openvpn ];
  then 
  echo "Found openvpn!"
OPENVPN_IP=$(lxc list openvpn -c 4 --format csv | awk '{print $1}')
iptables -t nat -I PREROUTING -i eth0 -p UDP -d $PUBLIC_IP --dport 1194 -j DNAT --to-destination $OPENVPN_IP:1194
echo "Updated Firewall Rules for OpenVPN"
else
echo "OpenVPN not found"
fi
echo "Saving Firewall Rules..." 
netfilter-persistent save
iptables -t nat -L PREROUTING
}

create_container() {
  #local CONTAINER_NAME=$1 # set the container-name to the first parameter
  lxc launch ubuntu:18.04 $1
  echo "Updating $1"
  sleep 10
  lxc exec $1 -- apt-get update #> /dev/null 2>&1
  lxc exec $1 -- apt-get upgrade -y #> /dev/null 2>&1
  echo "Container $1 Setup Complete"
}

remove() {
if [ -d /var/snap/lxd/common/lxd/containers/$1 ];
then
lxc delete $1 --force
lxc exec nginx -- rm /etc/nginx/conf.d/$1.conf
lxc exec nginx -- systemctl reload nginx
refresh_firewall
echo "$1 removed"
else
echo "$1 not found"
fi
}

init() {
  if [ -n "$LXQ_INIT" ]
  then
  echo "ERROR: LXQ Already Setup"
  else
  echo "Allowing SSH and Enabling Firewall..."
  ufw allow ssh
  ufw --force enable
  echo "Updating System..."
  apt-get update
  apt-get upgrade -y
  echo "Installing Packages..."
  echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections
  echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections
  apt-get install zfsutils-linux iptables-persistent snapd netdata -y
  echo "Removing LXD Packages..."
  apt-get remove --purge lxd lxd-client liblxc1 lxcfs -y
  apt-get autoremove -y
  echo "Installing LXD via Snap..."
  snap install lxd
  echo "Updating PATH..."
  export PATH=$PATH:/snap/bin
  echo "Configuing LXD..."
  cat /opt/lxq/preseed | lxd init --preseed
  echo "LXQ_INIT=TRUE" >> /etc/lxq/lxq.cfg
  echo LXD Setup Complete!
  echo
  lxq install nginx
  fi
  }
    
$@
