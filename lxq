#!/bin/bash

update() {
  cd /opt/lxq/
  git fetch --all # don't we need the git url here?
  git reset --hard origin/master
  chmod a+x lxq
}

create_container() {
  local CONTAINER_NAME=$1 # set the container-name to the first parameter
  lxc launch ubuntu:18.04 $CONTAINER_NAME
  echo "Updating Container..."
  lxc exec $CONTAINER_NAME -- apt-get update > /dev/null 2>&1
  lxc exec $CONTAINER_NAME -- apt-get upgrade -y > /dev/null 2>&1
  echo "Container $CONTAINER_NAME Setup Complete"
}

nextcloud() {
  
  CONTAINER_NAME=nextcloud
  CONTAINER_PORT=80

  echo "Enter Domain Name:"
  read DOMAIN_NAME
  create_container $CONTAINER_NAME

  until [[ -n "$CONTAINER_LOCAL_IP" ]] # loop until the container has an ip address
  do
    sleep .1
    local CONTAINER_LOCAL_IP=$(lxc list $CONTAINER_NAME -c 4 --format csv | awk '{print $1}')
  done
  
  echo "IP Address:" $CONTAINER_LOCAL_IP
  
  echo "Installing Nextcloud..."
  lxc exec $CONTAINER_NAME -- apt-get install snapd -y
  lxc exec $CONTAINER_NAME -- export PATH=$PATH:/snap/bin
  lxc exec $CONTAINER_NAME -- snap install nextcloud
  echo
  echo "Pushing .conf file to container..."
  cp /opt/lxq/nginx.temp $CONTAINER_NAME.conf
  sed -i "s/<<DOMAIN_NAME>>/$DOMAIN_NAME/g" $CONTAINER_NAME.conf
  sed -i "s/<<CONTAINER_LOCAL_IP>>/$CONTAINER_LOCAL_IP/g" $CONTAINER_NAME.conf
  sed -i "s/<<CONTAINER_PORT>>/$CONTAINER_PORT/g" $CONTAINER_NAME.conf
  lxc file push $CONTAINER_NAME.conf nginx/etc/nginx/conf.d/
  rm $CONTAINER_NAME.conf
  echo
  echo "Restarting nginx..."
  echo
  lxc restart nginx
  echo
  echo "Generating Certificates..."
  echo
  lxc exec nginx -- certbot --nginx -n --email webmaster@$DOMAIN_NAME --agree-tos --domains $DOMAIN_NAME --redirect
  echo
  echo Done!
  echo
}

rocketchat() {
  /opt/lxq/apps/nextcloud/rocketchat-install.sh #TODO move contents of script into this function
}

init() { #TODO comment this code, and figure out a way to only do this if it's running for the first time. Maybe test for a hidden file?
  if [ -f .lxq-init ];
    then echo "LXQ Already Setup!"
    else
  update
  echo "Allowing SSH and Enabling Firewall..."
  ufw allow ssh
  ufw --force enable
  echo "Updating System..."
  apt-get update
  apt-get upgrade -y
  echo "Installing Packages..."
  echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections
  echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections
  apt-get install zfsutils-linux iptables-persistent snapd netdata -y
  echo "Removing LXD Packages..."
  apt-get remove --purge lxd lxd-client liblxc1 lxcfs -y
  apt-get autoremove -y
  echo "Installing LXD via Snap..."
  snap install lxd
  echo "Updating PATH..."
  export PATH=$PATH:/snap/bin
  echo "Configuing LXD..."
  cat /opt/lxq/preseed | lxd init --preseed
  cat 
  echo
  echo LXD Setup Complete!
  touch .lxq-init
  echo
  nginx
  fi
  }
    
nginx() {
  create_container nginx
  sleep 5
  echo "Installing certbot..."
  lxc exec nginx -- apt-get update
  lxc exec nginx -- apt-get install software-properties-common
  lxc exec nginx -- add-apt-repository ppa:certbot/certbot
  lxc exec nginx -- apt-get update
  lxc exec nginx -- apt-get install python-certbot-nginx 

  echo "Installing NGINX..."
  lxc exec nginx -- apt-get install nginx  -y
  echo

    until [[ -n "$CONTAINER_LOCAL_IP" ]] # loop until the container has an ip address
   do
    sleep .1
    local CONTAINER_LOCAL_IP=$(lxc list $CONTAINER_NAME -c 4 --format csv | awk '{print $1}')
   done

  echo "Getting your public IPv4 address..."
  PUBLIC_IP=`curl -4 ifconfig.co`
  echo
  echo "Your Public IP is" $PUBLIC_IP
  echo
  echo "Updating iptables to forward 80/443 to nginx Container"
  echo
  iptables -t nat -I PREROUTING -i eth0 -p TCP -d $PUBLIC_IP --dport 80 -j DNAT --to-destination $CONTAINER_LOCAL_IP:80
  iptables -t nat -I PREROUTING -i eth0 -p TCP -d $PUBLIC_IP --dport 443 -j DNAT --to-destination $CONTAINER_LOCAL_IP:443
  netfilter-persistent save
  echo
  echo "Here are your current PREROUTING Rules"
  iptables -t nat -L PREROUTING
  echo "Setup Complete!"
  echo
}

menu() {
  echo
  echo "Welcome to LXQ"
  echo
  echo "Please select a command"
  echo "1. Update LXQ"
  echo "2. Create new container" #this may just point to lxd reference, if user doesn't want ubuntu18.04 container
  echo "3. Install Nextcloud"
  #etc
  echo -n "Enter a number:"
  read USER_INPUT
  
  case "$USER_INPUT" in
  1) update
    ;;
  2) create_container
    ;;
  3) nextcloud
    ;;
  *) echo "Invalid input"
    ;;
  esac
}

$@
