#!/bin/bash

update() {
  cd /opt/lxq/
  git fetch --all # don't we need the git url here?
  git reset --hard origin/master
  chmod a+x lxq
}

install() {
install_$1
}

refresh_firewall() {
echo "Clearing All PREROUTING Rules..."
for i in $( iptables -t nat --line-numbers -L | grep ^[0-9] | awk '{ print $1 }' | tac ); do iptables -t nat -D PREROUTING $i; done
echo "Getting Public IP Address..."
PUBLIC_IP=`curl ifconfig.me`
echo "Your Public IP is $PUBLIC_IP"
if [ -d /var/snap/lxd/common/lxd/containers/nginx ]; then echo "Found nginx!"
NGINX_IP=$(lxc list nginx -c 4 --format csv | awk '{print $1}')
iptables -t nat -I PREROUTING -i eth0 -p TCP -d $PUBLIC_IP --dport 80 -j DNAT --to-destination $NGINX_IP:80
iptables -t nat -I PREROUTING -i eth0 -p TCP -d $PUBLIC_IP --dport 443 -j DNAT --to-destination $NGINX_IP:443
echo "Updated Firewall Rules for nginx"

fi
if [ -d /var/snap/lxd/common/lxd/containers/openvpn ];
  then 
  echo "Found openvpn!"
OPENVPN_IP=$(lxc list openvpn -c 4 --format csv | awk '{print $1}')
iptables -t nat -I PREROUTING -i eth0 -p UDP -d $PUBLIC_IP --dport 1194 -j DNAT --to-destination $OPENVPN_IP:1194
echo "Updated Firewall Rules for OpenVPN"
else
echo "OpenVPN not found"
fi
echo "Saving Firewall Rules..." 
netfilter-persistent save
iptables -t nat -L PREROUTING
}

create_container() {
  local CONTAINER_NAME=$1 # set the container-name to the first parameter
  lxc launch ubuntu:18.04 $CONTAINER_NAME
  echo "Updating Container..."
  lxc exec $CONTAINER_NAME -- apt-get update > /dev/null 2>&1
  lxc exec $CONTAINER_NAME -- apt-get upgrade -y > /dev/null 2>&1
  echo "Container $CONTAINER_NAME Setup Complete"
}

install_nextcloud() {
  
  CONTAINER_NAME=nextcloud
  CONTAINER_PORT=80

  echo "Enter Domain Name:"
  read DOMAIN_NAME
  create_container $CONTAINER_NAME

  until [[ -n "$CONTAINER_LOCAL_IP" ]] # loop until the container has an ip address
  do
    sleep .1
    local CONTAINER_LOCAL_IP=$(lxc list $CONTAINER_NAME -c 4 --format csv | awk '{print $1}')
  done
  
  echo "IP Address:" $CONTAINER_LOCAL_IP
  
  echo "Installing Nextcloud..."
  lxc exec $CONTAINER_NAME -- apt-get install snapd -y
  lxc exec $CONTAINER_NAME -- export PATH=$PATH:/snap/bin
  sleep 1
  lxc exec $CONTAINER_NAME -- snap install nextcloud
  echo
  echo "Pushing .conf file to container..."
  cp /opt/lxq/nginx.temp $CONTAINER_NAME.conf
  sed -i "s/<<DOMAIN_NAME>>/$DOMAIN_NAME/g" $CONTAINER_NAME.conf
  sed -i "s/<<CONTAINER_LOCAL_IP>>/$CONTAINER_LOCAL_IP/g" $CONTAINER_NAME.conf
  sed -i "s/<<CONTAINER_PORT>>/$CONTAINER_PORT/g" $CONTAINER_NAME.conf
  lxc file push $CONTAINER_NAME.conf nginx/etc/nginx/conf.d/
  rm $CONTAINER_NAME.conf
  echo
  echo "Restarting nginx..."
  echo
    lxc exec nginx -- systemctl reload nginx
  echo
  echo "Generating Certificates..."
  echo
  lxc exec nginx -- certbot --nginx -n --email webmaster@$DOMAIN_NAME --agree-tos --domains $DOMAIN_NAME --redirect
  echo
  echo Done!
  echo
}

install_rocketchat() {
 
  CONTAINER_NAME=rocketchat
  CONTAINER_PORT=3000

  echo "Enter Domain Name:"
  read DOMAIN_NAME
  create_container $CONTAINER_NAME

  until [[ -n "$CONTAINER_LOCAL_IP" ]] # loop until the container has an ip address
  do
    sleep .1
    local CONTAINER_LOCAL_IP=$(lxc list $CONTAINER_NAME -c 4 --format csv | awk '{print $1}')
  done
  
  echo "IP Address:" $CONTAINER_LOCAL_IP
  
  echo "Installing RocketChat..."
  lxc exec $CONTAINER_NAME -- apt-get install snapd -y
  lxc exec $CONTAINER_NAME -- export PATH=$PATH:/snap/bin
  sleep 1
  lxc exec $CONTAINER_NAME -- snap install rocketchat-server
  echo
  echo "Pushing .conf file to container..."
  cp /opt/lxq/nginx.temp $CONTAINER_NAME.conf
  sed -i "s/<<DOMAIN_NAME>>/$DOMAIN_NAME/g" $CONTAINER_NAME.conf
  sed -i "s/<<CONTAINER_LOCAL_IP>>/$CONTAINER_LOCAL_IP/g" $CONTAINER_NAME.conf
  sed -i "s/<<CONTAINER_PORT>>/$CONTAINER_PORT/g" $CONTAINER_NAME.conf
  lxc file push $CONTAINER_NAME.conf nginx/etc/nginx/conf.d/
  rm $CONTAINER_NAME.conf
  echo
  echo "Restarting nginx..."
  echo
  lxc exec nginx -- systemctl reload nginx
  echo
  echo "Generating Certificates..."
  echo
  lxc exec nginx -- certbot --nginx -n --email webmaster@$DOMAIN_NAME --agree-tos --domains $DOMAIN_NAME --redirect
  echo
  echo Done!
  echo
}

install_openvpn() {

CONTAINER_NAME=openvpn
CONTAINER_PORT=1194

create_container $CONTAINER_NAME

echo "Installing OpenVPN..."
curl -O https://raw.githubusercontent.com/Angristan/openvpn-install/master/openvpn-install.sh
lxc file push openvpn-install.sh $CONTAINER_NAME/tmp/
rm openvpn-install.sh
lxc exec $CONTAINER_NAME -- chmod +x /tmp/openvpn-install.sh
lxc exec $CONTAINER_NAME -- /tmp/openvpn-install.sh
echo

echo "Getting your public IP address..."
PUBLIC_IP=`curl ifconfig.me`
echo
echo "Your Public IP is $PUBLIC_IP"
echo

  until [[ -n "$CONTAINER_LOCAL_IP" ]] # loop until the container has an ip address
  do
    sleep .1
    local CONTAINER_LOCAL_IP=$(lxc list $CONTAINER_NAME -c 4 --format csv | awk '{print $1}')
  done
  
  echo "Container IP Address:" $CONTAINER_LOCAL_IP
  
echo "Updating iptables to Forward 1194/udp to $c Container"
echo
iptables -t nat -I PREROUTING -i eth0 -p UDP -d $PUBLIC_IP --dport $CONTAINER_PORT -j DNAT --to-destination $CONTAINER_LOCAL_IP:$CONTAINER_PORT
netfilter-persistent save
echo
echo "Here are your current PREROUTING Rules"
iptables -t nat -L PREROUTING
echo "Setup Complete!"
echo
}

remove() {
wait_time=10 # seconds

echo "Are you sure you remove $1?"
echo "This is irreversible!"
echo ""
temp_cnt=${wait_time}
while [[ ${temp_cnt} -gt 0 ]];
do
    printf "\rYou have %2d second(s) remaining to hit Ctrl+C to cancel that operation!" ${temp_cnt}
    sleep 1
    ((temp_cnt--))
done
echo ""
#echo "Remove $1? [CTRL + C] to Cancel"
#sleep 5s
lxc delete $1 --force
lxc exec nginx -- rm /etc/nginx/conf.d/$1.conf 
refresh_firewall
echo "$1 removed"
}

init() { #TODO comment this code, and figure out a way to only do this if it's running for the first time. Maybe test for a hidden file?
  if [ -f /opt/lxq/.lxq-init ];
    then 
    echo
    echo "LXQ Already Setup!"
    echo
    else
  update
  echo "Allowing SSH and Enabling Firewall..."
  ufw allow ssh
  ufw --force enable
  echo "Updating System..."
  apt-get update
  apt-get upgrade -y
  echo "Installing Packages..."
  echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections
  echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections
  apt-get install zfsutils-linux iptables-persistent snapd netdata -y
  echo "Removing LXD Packages..."
  apt-get remove --purge lxd lxd-client liblxc1 lxcfs -y
  apt-get autoremove -y
  echo "Installing LXD via Snap..."
  snap install lxd
  echo "Updating PATH..."
  export PATH=$PATH:/snap/bin
  echo "Configuing LXD..."
  cat /opt/lxq/preseed | lxd init --preseed
  echo
  echo LXD Setup Complete!
  touch .lxq-init
  echo
  install_nginx
  fi
  }
    
install_nginx() {
  if [ -d /var/snap/lxd/common/lxd/containers/nginx ];
    then 
    echo
    echo "NGINX Container Already Exists!"
    echo
    else
  create_container nginx
  sleep 5
  echo "Installing certbot..."
  lxc exec nginx -- apt-get update -y
  lxc exec nginx -- apt-get install software-properties-common -y
  lxc exec nginx -- add-apt-repository ppa:certbot/certbot -y
  lxc exec nginx -- apt-get update -y
  lxc exec nginx -- apt-get install python-certbot-nginx -y 

  echo "Installing NGINX..."
  lxc exec nginx -- apt-get install nginx  -y
  echo

  refresh_firewall

  echo "Setup Complete!"
  echo
  fi
}

menu() {
  echo
  echo "Welcome to LXQ"
  echo
  echo "Please select a command"
  echo "1. Update LXQ"
  echo "2. Create new container" #this may just point to lxd reference, if user doesn't want ubuntu18.04 container
  echo "3. Install Nextcloud"
  #etc
  echo -n "Enter a number:"
  read USER_INPUT
  
  case "$USER_INPUT" in
  1) update
    ;;
  2) create_container
    ;;
  3) nextcloud
    ;;
  *) echo "Invalid input"
    ;;
  esac
}

$@
