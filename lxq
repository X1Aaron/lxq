#!/bin/bash

# colors
ECHO_RED="echo -e \e[31m" #ERRORS
ECHO_YELLOW="echo -e \e[33m" #INFORMATIONAL
ECHO_GREEN="echo -e \e[32m" #SUCCESS
NC="\e[0m" # clears color

source /etc/lxq/lxq.cfg  > /dev/null 2>&1

exec() {
  lxc exec $1 -- bash
}

test_colors() {
  $ECHO_RED"This is Red"$NC
  $ECHO_YELLOW"This is Yellow"$NC
  $ECHO_GREEN"This is Green"$NC
}

nginx_setup() {
source /opt/lxq/apps/$1/$1.conf
if [ -z $NGINX_SETUP ]
then
gen_conf $1 $2
lets_encrypt $1 $2
else
echo "Skipping NGINX setup..."
unset NGINX_SETUP
fi
}

update() {
  cd /opt/lxq/
  git fetch --all
  git reset --hard origin/master
  chmod a+x lxq
  chmod a+x fix-update.sh
  $ECHO_GREEN"LXQ UPDATED"$NC
}

install() {

if [ -d /var/snap/lxd/common/lxd/containers/$1 ];
then 
$ECHO_RED"ERROR: $1 Already Exists"$NC
exit
fi

if [ -z $1 ]
then
$ECHO_RED"ERROR: Missing APPNAME"$NC
exit
fi

if [ -z $2 ]
then
$ECHO_RED"ERROR: Missing DOMAIN NAME"$NC
exit
fi

source /opt/lxq/apps/$1/$1.conf

if [ $CREATE_CONTAINER = "NO" ]
then
$ECHO_YELLOW"Skipped Creating Container"$NC
else
create_container $1
fi

$ECHO_YELLOW"Installing $1..."$NC
source /opt/lxq/apps/$1/$1.install $1 $2

if [ $SETUP_NGINX = "NO" ]
then
$ECHO_YELLOW"Skipped NGINX setup"$NC
else
nginx_setup $1 $2
lxc exec nginx -- systemctl reload nginx
fi

if [ $REFRESH_FIREWALL = "NO" ]
then
$ECHO_YELLOW"Skipped Refreshing Firewall"$NC
else
refresh_firewall
fi
lxc exec nginx -- systemctl reload nginx
$ECHO_YELLOW"$1 setup complete!"$NC

}

gen_conf() {
source /opt/lxq/apps/$1/$1.conf
DOMAIN_NAME=$2
if [ -z "$WILDCARD_DOMAIN" ]
  then
  CONTAINER_LOCAL_IP=$(lxc list $1 -c 4 --format csv | awk '{print $1}')
  echo "IP Address:" $CONTAINER_LOCAL_IP
  echo "Pushing temporary .conf file to container..."
  cp /opt/lxq/templates/nginx.temp $1.conf
  cp /opt/lxq/apps/$1/nginx.conf $1.conf
  sed -i "s/<<DOMAIN_NAME>>/$DOMAIN_NAME/g" $1.conf
  sed -i "s/<<CONTAINER_LOCAL_IP>>/$CONTAINER_LOCAL_IP/g" $1.conf
  sed -i "s/<<CONTAINER_PORT>>/$CONTAINER_PORT/g" $1.conf
  lxc file push $1.conf nginx/etc/nginx/conf.d/
  rm $1.conf
  lxc exec nginx -- systemctl reload nginx
  else
  echo "Pushing wildcard .conf file to container..."
  CONTAINER_LOCAL_IP=$(lxc list $1 -c 4 --format csv | awk '{print $1}')
  cp /opt/lxq/templates/wildcard.temp $1.conf
  cp /opt/lxq/apps/$1/nginx.conf $1.conf
  SUB_DOMAIN="$1.$WILDCARD_DOMAIN"
  sed -i "s/<<SUB_DOMAIN>>/$SUB_DOMAIN/g" $1.conf
  sed -i "s/<<DOMAIN_NAME>>/$WILDCARD_DOMAIN/g" $1.conf
  sed -i "s/<<IP>>/$CONTAINER_LOCAL_IP/g" $1.conf
  sed -i "s/<<PORT>>/$CONTAINER_PORT/g" $1.conf
  lxc file push $1.conf nginx/etc/nginx/conf.d/
  rm $1.conf
  lxc exec nginx -- systemctl reload nginx
  fi
}

lets_encrypt() {
echo "Generating Certificates..."
DOMAIN_NAME=$2
  if [ -z "$WILDCARD_DOMAIN" ]
  then
  if [ -z "$LE_EMAIL" ]
  then
  echo
  echo "What is your email address? [Used for Let’s Encrypt]"
  read LE_EMAIL
  echo "LE_EMAIL=$LE_EMAIL" >> /etc/lxq/lxq.cfg
  fi
  lxc exec nginx -- certbot --nginx -n --email $LE_EMAIL --agree-tos --domains $DOMAIN_NAME --redirect
  else
  echo "Wildcard Certificate Installed!"
  fi
}


reload() {
lxc exec nginx -- systemctl reload nginx
if [ nginx = "$1" ]
then
lxc exec nginx -- systemctl reload nginx
fi
}

conf() {
if [ -z $1 ] 
then cat /etc/lxq/lxq.cfg 
fi
if [ edit = "$1" ] 
then nano /etc/lxq/lxq.cfg 
fi
if [ purge = "$1" ] 
then rm /etc/lxq/lxq.cfg 
fi
}

backup() {

if [ -z $1 ]
then
for i in $(ls /var/snap/lxd/common/lxd/containers/); 
do
echo "Backing up $i..."
lxc export $i $i.tar.xz ; 
done
else
echo "Backing up $1..."
lxc export $1 $1.tar.xz
fi

#rclone copy 20181106-160946-nginx.tar.xz wasabi:aaronstuder

#if [ -f /usr/bin/rclone ];
#    then 
#    echo
#    echo "Running Offsite Backup"
#    echo
#    else
#    echo "rclone not installed"
#   fi
}

wildcard() {

if [ -n "$WILDCARD_DOMAIN" ]
then
$ECHO_RED"ERROR: Wildcard Already Setup"$NC
exit
else

if [ -z $1 ]
then
$ECHO_RED"ERROR: Missing DNS Provider"$NC
exit
fi

if [ cloudflare = "$1" ]
then
dns_setup_cloudflare
fi
fi
}

dns_setup_cloudflare() {
echo "What is your Cloudflare Email Address?"
read cf_email
echo "What is your Cloudflare API Key?"
read cf_key
echo "Installing Cloudflare DNS Plugin"
lxc exec nginx -- apt-get install python3-certbot-dns-cloudflare -y
echo "Creating cloudflare.ini..." 
cat > cloudflare.ini <<EOF
# Cloudflare API credentials used by Certbot
dns_cloudflare_email = $cf_email
dns_cloudflare_api_key = $cf_key
EOF
$ECHO_YELLOW"Pushing cloudflare.ini to nginx container"$NC
lxc file push cloudflare.ini nginx/root/
rm cloudflare.ini
if [ -f /var/snap/lxd/common/mntns/var/snap/lxd/common/lxd/storage-pools/default/containers/nginx/rootfs/root/cloudflare.ini ];
then
$ECHO_GREEN"Cloudflare DNS setup complete!"$NC
lets_encrypt_wildcard
else
$ECHO_RED"ERROR: cloudflare.ini not created"$NC
exit
fi
}


lets_encrypt_wildcard() {
if [ -z "$LE_EMAIL" ]
then
$ECHO_YELLOW"What is your email address? [Used for Let’s Encrypt]"$NC
read LE_EMAIL
echo "LE_EMAIL=$LE_EMAIL" >> /etc/lxq/lxq.cfg
fi

if [ -z "$WILDCARD_DOMAIN" ]
then
echo
$ECHO_YELLOW"What is your domain name?"$NC
read WILDCARD_DOMAIN
echo "WILDCARD_DOMAIN=$WILDCARD_DOMAIN" >> /etc/lxq/lxq.cfg
fi

A="*."
WC_DOMAIN="$A$WILDCARD_DOMAIN"
$ECHO_YELLOW"Installing Wildcard Certificate for $WILDCARD_DOMAIN ($WC_DOMAIN)..."$NC
lxc exec nginx -- certbot certonly --dns-cloudflare --dns-cloudflare-credentials /root/cloudflare.ini -d $WILDCARD_DOMAIN  -d $WC_DOMAIN --agree-tos --noninteractive --manual-public-ip-logging-ok --email $LE_EMAIL
}

refresh_firewall() {

if [ -z "$PUBLIC_IP" ]
then
$ECHO_RED"ERROR: PUBLIC_IP missing from LXQ conf"$NC
exit
fi
echo
$ECHO_YELLOW"Clearing All PREROUTING Rules..."$NC
echo
for i in $( iptables -t nat --line-numbers -L | grep ^[0-9] | awk '{ print $1 }' | tac )
do
iptables -t nat -D PREROUTING $i  > /dev/null 2>&1
done
$ECHO_YELLOW"PUBLIC IP:$NC$PUBLIC_IP"
for i in $(ls /var/snap/lxd/common/lxd/containers/); 
do
CONTAINER_IP=$(lxc list $i -c 4 --format csv | awk '{print $1}')
source /opt/lxq/apps/$i/$i.rules > /dev/null 2>&1
$ECHO_GREEN"Updated Firewall Rules for $i$NC($CONTAINER_IP)"
done
echo
$ECHO_GREEN"SUCCESS: All Firewall Rules Updated"$NC
echo
}

create_container() {
  #local CONTAINER_NAME=$1 # set the container-name to the first parameter
  lxc launch ubuntu:18.04 $1
  echo "Updating $1"
  sleep 10
  lxc exec $1 -- apt-get update #> /dev/null 2>&1
  lxc exec $1 -- apt-get upgrade -y #> /dev/null 2>&1
  echo "SUCCESS: Container $1 Setup Complete"
}

remove() {
if [ -d /var/snap/lxd/common/lxd/containers/$1 ];
then
apt-get remove $1 -y
lxc delete $1 --force
lxc exec nginx -- rm /etc/nginx/conf.d/$1.conf
lxc exec nginx -- systemctl reload nginx
refresh_firewall
echo "SUCCESS: $1 removed"
else
echo "ERROR: $1 not found"
fi
}

init() {
  if [ -n "$LXQ_INIT" ]
  then
  $ECHO_RED"ERROR: LXQ Already Setup"$NC
  else
  $ECHO_YELLOW"Allowing Ports and Enabling Firewall..."$NC
  ufw allow ssh
  ufw --force enable
  $ECHO_YELLOW"Updating System..."$NC
  apt-get update
  apt-get upgrade -y
  $ECHO_YELLOW"Installing Packages..."$NC
  echo iptables-persistent iptables-persistent/autosave_v4 boolean true | sudo debconf-set-selections
  echo iptables-persistent iptables-persistent/autosave_v6 boolean true | sudo debconf-set-selections
  apt-get install zfsutils-linux iptables-persistent snapd -y
  $ECHO_YELLOW"Removing LXD Packages..."$NC
  apt-get remove --purge lxd lxd-client liblxc1 lxcfs -y
  apt-get autoremove -y
  $ECHO_YELLOW"Installing LXD via Snap..."$NC
  snap install lxd
  export PATH=$PATH:/snap/bin
  $ECHO_YELLOW"Configuing LXD..."$NC
  cat /opt/lxq/preseed | lxd init --preseed
  mkdir /etc/lxq/
  echo "LXQ_INIT=TRUE" >> /etc/lxq/lxq.cfg
  PUBLIC_IP=`curl -s ifconfig.me`
  echo "Public IP: $PUBLIC_IP"
  echo "PUBLIC_IP=$PUBLIC_IP" >> /etc/lxq/lxq.cfg
  $ECHO_YELLOW"SUCCESS: LXQ init Complete!"$NC
  lxq install nginx nginx
  fi
  }
    
$@
